<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <meta name="mobile-web-app-capable" content="yes">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="format-detection" content="telephone=no, aliress=no, email=no">
        <meta property="og:type" content="website">
        <meta property="og:title" content="광주 RISE 지역·대학 플랫폼">
        <meta property="og:description" content="광주 RISE 지역·대학 플랫폼">
        <link rel="shortcut icon" href="$request.getContextPath()/images/layout/favicon.ico">
        <title>RISE login</title>
        <link rel="stylesheet" href="$request.getContextPath()/css/libs/bootstrap.min.css">
        <link rel="stylesheet" href="$request.getContextPath()/css/libs/bootstrap-icons.min.css">
        <link rel="stylesheet" href="$request.getContextPath()/css/libs/all.css">
        <link rel="stylesheet" href="$request.getContextPath()/css/common.css">
        <link rel="stylesheet" href="$request.getContextPath()/css/layout.css">
        <link rel="stylesheet" href="$request.getContextPath()/css/login.css">
    </head>

    <body>
        <div class="wrap">
            <h1 class="view_logo_mobile">
                <img src="$request.getContextPath()/images/login/logo.svg" alt="RISE">
            </h1>
            <div class="loginbox">
                <div class="visual">
                    <h1>
                        RISE <br>지역혁신중심 대학지원체계
                    </h1>
                </div>

                <form action="$flowExecutionUrl" method="post">
                    #parse("csrf/csrf.vm")
                    
                    <!-- Extract userType from SAML RelayState -->
                    #set($userTypeParam = "")
                    #set($relayState = "")
                    #set($originalRelayState = "")
                    
                    ## Method 1: Try to get original RelayState from flow scope
                    #if($flowScope && $flowScope.relayState)
                        #set($relayState = $flowScope.relayState)
                    #end
                    
                    ## Method 2: Access through ProfileRequestContext
                    #set($profileCtx = $profileRequestContext)
                    #if($profileCtx)
                        #set($inboundCtx = $profileCtx.getInboundMessageContext())
                        #if($inboundCtx)
                            #set($samlMessage = $inboundCtx.getMessage())
                            #if($samlMessage)
                                #set($originalRelayState = $samlMessage.getRelayState())
                            #end
                        #end
                    #end
                    
                    ## Method 3: Try to get from HTTP request parameters (current flow execution)
                    #if(!$relayState)
                        #set($relayState = $request.getParameter("RelayState"))
                    #end
                    
                    ## Method 4: Access through Spring Web Flow context
                    #if($flowExecutionContext && $flowExecutionContext.flowScope)
                        #set($flowScopeObj = $flowExecutionContext.flowScope)
                        #if($flowScopeObj.relayState)
                            #set($relayState = $flowScopeObj.relayState)
                        #end
                        #if($flowScopeObj.originalRelayState)
                            #set($originalRelayState = $flowScopeObj.originalRelayState)
                        #end
                    #end
                    
                    ## Method 5: Try to access through conversation/flow attributes
                    #if($flowExecutionContext && $flowExecutionContext.activeSession)
                        #set($session = $flowExecutionContext.activeSession)
                        #if($session.scope && $session.scope.relayState)
                            #set($relayState = $session.scope.relayState)
                        #end
                    #end
                    
                    ## Method 6: Check flowRequestContext for stored parameters
                    #if($flowRequestContext && $flowRequestContext.flowScope)
                        #set($flowScope = $flowRequestContext.flowScope)
                        #if($flowScope.originalRelayState)
                            #set($originalRelayState = $flowScope.originalRelayState)
                        #end
                    #end
                    
                    ## Use originalRelayState if available, otherwise use relayState
                    #set($workingRelayState = "")
                    #if($originalRelayState && $originalRelayState != "")
                        #set($workingRelayState = $originalRelayState)
                    #elseif($relayState && $relayState != "")
                        #set($workingRelayState = $relayState)
                    #end
                    
                    ## Extract userType from working RelayState URL if available
                    #if($workingRelayState && $workingRelayState.contains("userType="))
                        #set($userTypeStart = $workingRelayState.indexOf("userType=") + 9)
                        #set($userTypeEnd = $workingRelayState.indexOf("&", $userTypeStart))
                        #if($userTypeEnd == -1)
                            #set($userTypeParam = $workingRelayState.substring($userTypeStart))
                        #else
                            #set($userTypeParam = $workingRelayState.substring($userTypeStart, $userTypeEnd))
                        #end
                        ## URL decode if necessary
                        #if($userTypeParam.contains("%"))
                            #set($userTypeParam = $userTypeParam.replace("%20", " "))
                            #set($userTypeParam = $userTypeParam.replace("%3D", "="))
                            #set($userTypeParam = $userTypeParam.replace("%26", "&"))
                        #end
                    #end
                    
                    ## Fallback methods for userType extraction
                    #if(!$userTypeParam || $userTypeParam == "")
                        ## Check flowScope for direct userType
                        #set($userTypeParam = $flowScope.userType)
                    #end
                    
                    #if(!$userTypeParam || $userTypeParam == "")
                        ## Check request attributes
                        #set($userTypeParam = $request.getAttribute("userType"))
                    #end
                    
                    #if(!$userTypeParam || $userTypeParam == "")
                        ## Check direct request parameter
                        #set($userTypeParam = $request.getParameter("userType"))
                    #end
                    
                    ## Debug information (can be removed in production)
                    <!-- Debug - Current RelayState: '$!relayState' -->
                    <!-- Debug - Original RelayState: '$!originalRelayState' -->
                    <!-- Debug - Working RelayState: '$!workingRelayState' -->
                    <!-- Debug - Extracted userType: '$!userTypeParam' -->
                    <!-- Debug - Flow Execution URL: '$!flowExecutionUrl' -->
                    <!-- Debug - Request Parameters: -->
                    #foreach($paramName in $request.getParameterNames())
                        <!-- Debug - Request $paramName: '$!{request.getParameter($paramName)}' -->
                    #end
                    <!-- Debug - Flow Scope Keys: -->
                    #if($flowScope)
                        #foreach($key in $flowScope.keySet())
                            <!-- Debug - FlowScope $key: '$!{flowScope.get($key)}' -->
                        #end
                    #end
                    
                    <!-- Hidden inputs for custom parameters -->
                    <input type="hidden" name="userType" id="userTypeInput" value="$!userTypeParam" />
                    
                    ## Extract other custom parameters from RelayState if needed
                    #set($customParams = ["source", "redirect", "context"])
                    #foreach($param in $customParams)
                        #set($paramValue = "")
                        #if($relayState && $relayState.contains("${param}="))
                            #set($paramStart = $relayState.indexOf("${param}=") + $param.length() + 1)
                            #set($paramEnd = $relayState.indexOf("&", $paramStart))
                            #if($paramEnd == -1)
                                #set($paramValue = $relayState.substring($paramStart))
                            #else
                                #set($paramValue = $relayState.substring($paramStart, $paramEnd))
                            #end
                        #end
                        <input type="hidden" name="$param" id="${param}Input" value="$!paramValue" />
                    #end
                    
                    <div class="formbox">
                        <h2>
                            <p class="rise-logo">광주 RISE</p>
                            <img src="$request.getContextPath()/images/logo.png" alt="GRISEON">
                        </h2>
                        <div class="txt-box">
                            <h3>Login</h3>
                        </div>
                        <div class="sign">
                        #set($userType = $userTypeParam)
                        #if(!$userType || $userType == "")
                            #set($userType = $flowScope.userType)
                        #end

                        #if($userType == "company")
                            <a href="javascript:;" class="active"><strong>회사 계정정보</strong>를 입력해주세요.</a>
                        #else
                            <a href="javascript:;" class="active"><strong>학교 계정정보</strong>를 입력해주세요.</a>
                        #end
                        </div>
                        <div class="inputbox id">
                            <input type="text" id="username" name="j_username" placeholder=" " value="#if($username)$encoder.encodeForHTML($username)#end">
                            <label for="username">아이디</label>
                        </div>
                        <div class="inputbox pw">
                            <input type="password" id="password" name="j_password" placeholder=" " value="">
                            <label for="password">비밀번호</label>
                            <button id="togglePassword" class="toggle-pw" type="button"><i class="bi bi-eye-slash"></i></button>
                        </div>
                #parse("login-error.vm")
                        <div class="forgot">
                            <label>
                                <input type="checkbox" name="donotcache" value="1" id="donotcache">사용자 아이디 기억하지 않기
                                <span class="check-icon"></span>
                            </label>
                            <button class="btn-login" type="submit" name="_eventId_proceed">#springMessageText("idp.login.login", "Login")</button>
                            <label>
                                <input id="_shib_idp_revokeConsent" type="checkbox" name="_shib_idp_revokeConsent" value="true">개인정보제공방식
                                <span class="check-icon"></span>
                            </label>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <script>
        const passwordInput = document.getElementById("password");
        const togglePassword = document.getElementById("togglePassword");
        const icon = togglePassword.querySelector("i");

        // 입력 시 아이콘 보이기/숨기기
        passwordInput.addEventListener("input", () => {
            togglePassword.style.display = passwordInput.value ? "block" : "none";
        });

        // 비밀번호 보기/숨기기 기능
        togglePassword.addEventListener("click", () => {
            const isHidden = passwordInput.type === "password";
            passwordInput.type = isHidden ? "text" : "password";
            icon.classList.toggle("bi-eye");
            icon.classList.toggle("bi-eye-slash");
        });

        // Initialize userType using the enhanced extraction function for SAML flow
        (function() {
            // First preserve any SAML flow information
            preserveSAMLFlowParameters();
            
            const userType = extractCustomParameter('userType', 'student');
            const userTypeInput = document.getElementById('userTypeInput');
            
            // Set the userType in the form
            if (userTypeInput) {
                userTypeInput.value = userType;
            }
            
            // Update UI based on userType
            updateUIForUserType(userType);
            
            // Store for session continuity (if same domain or cross-domain compatible)
            try {
                sessionStorage.setItem('saml_userType', userType);
                sessionStorage.setItem('saml_userType_timestamp', new Date().getTime());
                console.log('UserType stored in session for SAML flow:', userType);
            } catch (e) {
                console.log('Could not store userType in session:', e.message);
            }
            
            // Also try cross-domain cookie if possible
            try {
                document.cookie = `gjriseon_userType=${userType}; path=/; domain=.bitgaram.info; max-age=600; SameSite=None; Secure`;
                console.log('UserType stored in cross-domain cookie:', userType);
            } catch (e) {
                console.log('Could not set cross-domain cookie:', e.message);
            }
            
            console.log('=== SAML Flow UserType Processing Complete ===');
            console.log('Final userType applied:', userType);
            console.log('Current URL:', window.location.href);
            console.log('Form action:', document.querySelector('form')?.action);
            console.log('============================================');
        })();

        function updateUIForUserType(userType) {
            const signElement = document.querySelector('.sign a');
            if (signElement) {
                if (userType === 'company') {
                    signElement.innerHTML = '<strong>회사 계정정보</strong>를 입력해주세요.';
                } else if (userType === 'external') {
                    signElement.innerHTML = '<strong>대학 계정정보</strong>를 입력해주세요.';
                } else {
                    signElement.innerHTML = '<strong>학교 계정정보</strong>를 입력해주세요.';
                }
            }
        }

        // Generic function to extract any parameter from RelayState or URL (Cross-Domain Safe)
        function extractCustomParameter(paramName, defaultValue = '') {
            let paramValue = '';
            
            // Method 1: Check if set by server-side (from RelayState) - PRIMARY METHOD
            const hiddenInput = document.getElementById(paramName + 'Input');
            if (hiddenInput && hiddenInput.value) {
                paramValue = hiddenInput.value;
                console.log(`${paramName} from server (RelayState):`, paramValue);
                return paramValue;
            }
            
            // Method 2: Extract from current URL and referrer for SAML flow analysis
            console.log('=== SAML Flow Analysis ===');
            console.log('Current URL:', window.location.href);
            console.log('Referrer:', document.referrer);
            
            // Check current URL for direct parameters
            let urlMatch = window.location.href.match(new RegExp(`[?&]${paramName}=([^&]*)`));
            if (urlMatch) {
                paramValue = decodeURIComponent(urlMatch[1]);
                console.log(`${paramName} from current URL:`, paramValue);
                return paramValue;
            }
            
            // Method 3: Parse referrer URL for original RelayState information
            if (document.referrer) {
                // Look for RelayState in referrer that might contain our parameter
                const referrerRelayStateMatch = document.referrer.match(/RelayState=([^&]*)/);
                if (referrerRelayStateMatch) {
                    const relayStateValue = decodeURIComponent(referrerRelayStateMatch[1]);
                    console.log('Found RelayState in referrer:', relayStateValue);
                    
                    // Check if RelayState contains URL with parameters
                    if (relayStateValue.includes(paramName + '=')) {
                        const paramMatch = relayStateValue.match(new RegExp(`${paramName}=([^&]*)`));
                        if (paramMatch) {
                            paramValue = decodeURIComponent(paramMatch[1]);
                            console.log(`${paramName} from referrer RelayState:`, paramValue);
                            return paramValue;
                        }
                    }
                }
                
                // Check for direct parameter in referrer
                const referrerMatch = document.referrer.match(new RegExp(`[?&]${paramName}=([^&]*)`));
                if (referrerMatch) {
                    paramValue = decodeURIComponent(referrerMatch[1]);
                    console.log(`${paramName} from referrer URL:`, paramValue);
                    return paramValue;
                }
            }
            
            // Method 4: Browser history analysis (if accessible)
            try {
                if (window.history && window.history.length > 1) {
                    console.log('Browser history length:', window.history.length);
                    // Unfortunately, we can't access previous URLs from history for security reasons
                }
            } catch (e) {
                console.log('History access not available:', e.message);
            }
            
            // Method 5: Check session storage for SAML flow preservation
            try {
                const sessionKey = `saml_${paramName}`;
                const sessionValue = sessionStorage.getItem(sessionKey);
                if (sessionValue) {
                    // Check if the value is recent (within last 10 minutes)
                    const timestampKey = `saml_${paramName}_timestamp`;
                    const timestamp = sessionStorage.getItem(timestampKey);
                    if (timestamp) {
                        const age = new Date().getTime() - parseInt(timestamp);
                        if (age < 600000) { // 10 minutes
                            paramValue = sessionValue;
                            console.log(`${paramName} from session storage (SAML flow):`, paramValue);
                            return paramValue;
                        } else {
                            sessionStorage.removeItem(sessionKey);
                            sessionStorage.removeItem(timestampKey);
                        }
                    }
                }
            } catch (e) {
                console.log('Session storage not accessible:', e.message);
            }
            
            // Method 6: Check cross-domain compatible cookies
            const cookieMatch = document.cookie.match(new RegExp(`gjriseon_${paramName}=([^;]*)`));
            if (cookieMatch) {
                paramValue = decodeURIComponent(cookieMatch[1]);
                console.log(`${paramName} from cookie (cross-domain):`, paramValue);
                return paramValue;
            }
            
            // Method 7: Check if parameter is embedded in the form action URL
            const formAction = document.querySelector('form').action;
            if (formAction) {
                console.log('Form action URL:', formAction);
                const actionMatch = formAction.match(new RegExp(`[?&]${paramName}=([^&]*)`));
                if (actionMatch) {
                    paramValue = decodeURIComponent(actionMatch[1]);
                    console.log(`${paramName} from form action:`, paramValue);
                    return paramValue;
                }
            }
            
            // Method 8: Extract from SAML execution URL pattern
            const executionMatch = window.location.href.match(/execution=([^&]*)/);
            if (executionMatch) {
                console.log('SAML execution found:', executionMatch[1]);
                // Unfortunately, execution ID doesn't directly contain original parameters
                // This is where we need server-side flow modification
            }
            
            console.log(`${paramName} not found through any method, using default:`, defaultValue);
            return defaultValue;
        }
        
        // Function to preserve SAML flow parameters
        function preserveSAMLFlowParameters() {
            // Store current referrer information for potential parameter extraction
            if (document.referrer) {
                try {
                    sessionStorage.setItem('saml_flow_referrer', document.referrer);
                    sessionStorage.setItem('saml_flow_timestamp', new Date().getTime());
                    console.log('SAML flow referrer preserved:', document.referrer);
                } catch (e) {
                    console.log('Could not preserve SAML flow info:', e.message);
                }
            }
        }
        </script>
    </body>
</html>